0: int -> T_Int
3: whitespace -> T_Whitespace
4: test_function -> T_Id
17: ( -> T_LP
18: int -> T_Int
21: whitespace -> T_Whitespace
22: a -> T_Id
23: , -> T_Comma
24: whitespace -> T_Whitespace
25: int -> T_Int
28: whitespace -> T_Whitespace
29: b -> T_Id
30: , -> T_Comma
31: whitespace -> T_Whitespace
32: bool -> T_Bool
36: whitespace -> T_Whitespace
37: c -> T_Id
38: ) -> T_RP
39: { -> T_LC
40: whitespace -> T_Whitespace
42: // this is a function -> T_Comment
63: whitespace -> T_Whitespace
65: if -> T_If
67: whitespace -> T_Whitespace
68: ( -> T_LP
69: c -> T_Id
70: whitespace -> T_Whitespace
71: == -> T_ROp_E
73: whitespace -> T_Whitespace
74: true -> T_True
78: ) -> T_RP
79: { -> T_LC
80: whitespace -> T_Whitespace
83: return -> T_Return
89: whitespace -> T_Whitespace
90: a -> T_Id
91: + -> T_AOp_PL
92: b -> T_Id
93: ; -> T_Semicolon
94: whitespace -> T_Whitespace
96: } -> T_RC
97: whitespace -> T_Whitespace
99: else -> T_Else
103: whitespace -> T_Whitespace
104: { -> T_LC
105: whitespace -> T_Whitespace
108: return -> T_Return
114: whitespace -> T_Whitespace
115: a -> T_Id
116: - -> T_AOp_MN
117: b -> T_Id
118: ; -> T_Semicolon
119: whitespace -> T_Whitespace
121: } -> T_RC
122: whitespace -> T_Whitespace
123: } -> T_RC
124: whitespace -> T_Whitespace
126: int -> T_Int
129: whitespace -> T_Whitespace
130: main -> T_Id
134: ( -> T_LP
135: ) -> T_RP
136: { -> T_LC
137: whitespace -> T_Whitespace
139: bool -> T_Bool
143: whitespace -> T_Whitespace
144: add -> T_Id
147: whitespace -> T_Whitespace
148: = -> T_Assign
149: whitespace -> T_Whitespace
150: true -> T_True
154: ; -> T_Semicolon
155: whitespace -> T_Whitespace
157: char -> T_Char
161: whitespace -> T_Whitespace
162: _assign1 -> T_Id
170: whitespace -> T_Whitespace
171: = -> T_Assign
172: whitespace -> T_Whitespace
173: '=' -> T_Character
176: ; -> T_Semicolon
177: whitespace -> T_Whitespace
179: char -> T_Char
183: whitespace -> T_Whitespace
184: String_1 -> T_Id
192: [ -> T_LB
193: ] -> T_RB
194: whitespace -> T_Whitespace
195: = -> T_Assign
196: whitespace -> T_Whitespace
197: " + " -> T_String
202: ; -> T_Semicolon
203: whitespace -> T_Whitespace
205: char -> T_Char
209: whitespace -> T_Whitespace
210: String_2 -> T_Id
218: [ -> T_LB
219: ] -> T_RB
220: whitespace -> T_Whitespace
221: = -> T_Assign
222: whitespace -> T_Whitespace
223: " - " -> T_String
228: ; -> T_Semicolon
229: whitespace -> T_Whitespace
231: for -> T_For
234: ( -> T_LP
235: int -> T_Int
238: whitespace -> T_Whitespace
239: i -> T_Id
240: whitespace -> T_Whitespace
241: = -> T_Assign
242: whitespace -> T_Whitespace
243: 0 -> T_Decimal
244: ; -> T_Semicolon
245: whitespace -> T_Whitespace
246: i -> T_Id
247: whitespace -> T_Whitespace
248: <= -> T_ROp_LE
250: whitespace -> T_Whitespace
251: ( -> T_LP
252: +10 -> T_Decimal
255: whitespace -> T_Whitespace
256: / -> T_AOp_DV
257: whitespace -> T_Whitespace
258: 2 -> T_Decimal
259: ) -> T_RP
260: ; -> T_Semicolon
261: whitespace -> T_Whitespace
262: i -> T_Id
263: whitespace -> T_Whitespace
264: = -> T_Assign
265: whitespace -> T_Whitespace
266: i -> T_Id
267: whitespace -> T_Whitespace
268: + -> T_AOp_PL
269: whitespace -> T_Whitespace
270: 1 -> T_Decimal
271: ) -> T_RP
272: { -> T_LC
273: whitespace -> T_Whitespace
276: for -> T_For
279: whitespace -> T_Whitespace
280: ( -> T_LP
281: int -> T_Int
284: whitespace -> T_Whitespace
285: j -> T_Id
286: whitespace -> T_Whitespace
287: = -> T_Assign
288: whitespace -> T_Whitespace
289: 0x0 -> T_Hexadecimal
292: ; -> T_Semicolon
293: whitespace -> T_Whitespace
294: j -> T_Id
295: whitespace -> T_Whitespace
296: != -> T_ROp_NE
298: whitespace -> T_Whitespace
299: ( -> T_LP
300: 5 -> T_Decimal
301: whitespace -> T_Whitespace
302: * -> T_AOp_ML
303: whitespace -> T_Whitespace
304: -1 -> T_Decimal
306: ) -> T_RP
307: whitespace -> T_Whitespace
309: ; -> T_Semicolon
310: whitespace -> T_Whitespace
311: j -> T_Id
312: whitespace -> T_Whitespace
313: = -> T_Assign
314: whitespace -> T_Whitespace
315: j -> T_Id
316: whitespace -> T_Whitespace
317: - -> T_AOp_MN
318: whitespace -> T_Whitespace
319: 1 -> T_Decimal
320: ) -> T_RP
321: { -> T_LC
322: whitespace -> T_Whitespace
326: print -> T_Print
331: ( -> T_LP
332: i -> T_Id
333: ) -> T_RP
334: ; -> T_Semicolon
335: whitespace -> T_Whitespace
339: print -> T_Print
344: ( -> T_LP
345: String_1 -> T_Id
353: ) -> T_RP
354: ; -> T_Semicolon
355: whitespace -> T_Whitespace
359: print -> T_Print
364: ( -> T_LP
365: j -> T_Id
366: ) -> T_RP
367: ; -> T_Semicolon
368: whitespace -> T_Whitespace
372: print -> T_Print
377: ( -> T_LP
378: _assign1 -> T_Id
386: ) -> T_RP
387: ; -> T_Semicolon
388: whitespace -> T_Whitespace
392: print -> T_Print
397: ( -> T_LP
398: test_function -> T_Id
411: ( -> T_LP
412: i -> T_Id
413: , -> T_Comma
414: j -> T_Id
415: , -> T_Comma
416: add -> T_Id
419: ) -> T_RP
420: ) -> T_RP
421: ; -> T_Semicolon
422: whitespace -> T_Whitespace
425: } -> T_RC
426: whitespace -> T_Whitespace
428: } -> T_RC
429: whitespace -> T_Whitespace
431: add -> T_Id
434: whitespace -> T_Whitespace
435: = -> T_Assign
436: whitespace -> T_Whitespace
437: false -> T_False
442: ; -> T_Semicolon
443: whitespace -> T_Whitespace
445: for -> T_For
448: whitespace -> T_Whitespace
449: ( -> T_LP
450: int -> T_Int
453: whitespace -> T_Whitespace
454: i -> T_Id
455: whitespace -> T_Whitespace
456: = -> T_Assign
457: whitespace -> T_Whitespace
458: 0 -> T_Decimal
459: ; -> T_Semicolon
460: whitespace -> T_Whitespace
461: ! -> T_LOp_NOT
462: ( -> T_LP
463: i -> T_Id
464: whitespace -> T_Whitespace
465: == -> T_ROp_E
467: whitespace -> T_Whitespace
468: +5 -> T_Decimal
470: ) -> T_RP
471: ; -> T_Semicolon
472: whitespace -> T_Whitespace
473: i -> T_Id
474: whitespace -> T_Whitespace
475: = -> T_Assign
476: whitespace -> T_Whitespace
477: i -> T_Id
478: whitespace -> T_Whitespace
479: + -> T_AOp_PL
480: whitespace -> T_Whitespace
481: 1 -> T_Decimal
482: ) -> T_RP
483: whitespace -> T_Whitespace
484: { -> T_LC
485: whitespace -> T_Whitespace
488: for -> T_For
491: whitespace -> T_Whitespace
492: ( -> T_LP
493: int -> T_Int
496: whitespace -> T_Whitespace
497: j -> T_Id
498: whitespace -> T_Whitespace
499: = -> T_Assign
500: whitespace -> T_Whitespace
501: 0x0 -> T_Hexadecimal
504: ; -> T_Semicolon
505: whitespace -> T_Whitespace
506: j -> T_Id
507: whitespace -> T_Whitespace
508: >= -> T_ROp_LE
510: whitespace -> T_Whitespace
511: -5 -> T_Decimal
513: ; -> T_Semicolon
514: whitespace -> T_Whitespace
515: j -> T_Id
516: whitespace -> T_Whitespace
517: = -> T_Assign
518: whitespace -> T_Whitespace
519: j -> T_Id
520: whitespace -> T_Whitespace
521: - -> T_AOp_MN
522: whitespace -> T_Whitespace
523: 1 -> T_Decimal
524: ) -> T_RP
525: whitespace -> T_Whitespace
526: { -> T_LC
527: whitespace -> T_Whitespace
531: if -> T_If
533: ( -> T_LP
534: ( -> T_LP
535: i -> T_Id
536: whitespace -> T_Whitespace
537: % -> T_AOp_RM
538: whitespace -> T_Whitespace
539: 4 -> T_Decimal
540: ) -> T_RP
541: whitespace -> T_Whitespace
542: == -> T_ROp_E
544: whitespace -> T_Whitespace
545: 0 -> T_Decimal
546: whitespace -> T_Whitespace
547: || -> T_LOp_OR
549: whitespace -> T_Whitespace
550: ( -> T_LP
551: i -> T_Id
552: whitespace -> T_Whitespace
553: % -> T_AOp_RM
554: whitespace -> T_Whitespace
555: 3 -> T_Decimal
556: ) -> T_RP
557: whitespace -> T_Whitespace
558: == -> T_ROp_E
560: whitespace -> T_Whitespace
561: 0 -> T_Decimal
562: ) -> T_RP
563: whitespace -> T_Whitespace
568: continue -> T_Continue
576: ; -> T_Semicolon
577: whitespace -> T_Whitespace
581: if -> T_If
583: ( -> T_LP
584: j -> T_Id
585: whitespace -> T_Whitespace
586: < -> T_ROp_L
587: whitespace -> T_Whitespace
588: -4 -> T_Decimal
590: whitespace -> T_Whitespace
591: && -> T_LOp_AND
593: whitespace -> T_Whitespace
594: i -> T_Id
595: whitespace -> T_Whitespace
596: > -> T_ROp_G
597: whitespace -> T_Whitespace
598: 3 -> T_Decimal
599: ) -> T_RP
600: whitespace -> T_Whitespace
605: break -> T_Break
610: ; -> T_Semicolon
611: whitespace -> T_Whitespace
615: print -> T_Print
620: ( -> T_LP
621: i -> T_Id
622: ) -> T_RP
623: ; -> T_Semicolon
624: whitespace -> T_Whitespace
628: print -> T_Print
633: ( -> T_LP
634: String_2 -> T_Id
642: ) -> T_RP
643: ; -> T_Semicolon
644: whitespace -> T_Whitespace
648: print -> T_Print
653: ( -> T_LP
654: j -> T_Id
655: ) -> T_RP
656: ; -> T_Semicolon
657: whitespace -> T_Whitespace
661: print -> T_Print
666: ( -> T_LP
667: _assign1 -> T_Id
675: ) -> T_RP
676: ; -> T_Semicolon
677: whitespace -> T_Whitespace
681: print -> T_Print
686: ( -> T_LP
687: test_function -> T_Id
700: ( -> T_LP
701: i -> T_Id
702: , -> T_Comma
703: whitespace -> T_Whitespace
704: j -> T_Id
705: , -> T_Comma
706: whitespace -> T_Whitespace
707: add -> T_Id
710: ) -> T_RP
711: ) -> T_RP
712: ; -> T_Semicolon
713: whitespace -> T_Whitespace
716: } -> T_RC
717: whitespace -> T_Whitespace
719: } -> T_RC
720: whitespace -> T_Whitespace
722: print -> T_Print
727: ( -> T_LP
728: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recogized" -> T_String
828: ) -> T_RP
829: ; -> T_Semicolon
830: whitespace -> T_Whitespace
832: char -> T_Char
836: whitespace -> T_Whitespace
837: back -> T_Id
841: whitespace -> T_Whitespace
842: = -> T_Assign
843: whitespace -> T_Whitespace
844: '\\' -> T_Character
848: ; -> T_Semicolon
849: whitespace -> T_Whitespace
851: char -> T_Char
855: whitespace -> T_Whitespace
856: quote -> T_Id
861: whitespace -> T_Whitespace
862: = -> T_Assign
863: whitespace -> T_Whitespace
864: '\'' -> T_Character
868: ; -> T_Semicolon
869: whitespace -> T_Whitespace
871: int -> T_Int
874: whitespace -> T_Whitespace
875: _123 -> T_Id
879: whitespace -> T_Whitespace
880: = -> T_Assign
881: whitespace -> T_Whitespace
882: 0XABCdef1230 -> T_Hexadecimal
894: ; -> T_Semicolon
895: whitespace -> T_Whitespace
896: } -> T_RC

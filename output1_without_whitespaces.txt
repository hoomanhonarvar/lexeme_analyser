0: int -> T_Int
4: test_function -> T_Id
17: ( -> T_LP
18: int -> T_Int
22: a -> T_Id
23: , -> T_Comma
25: int -> T_Int
29: b -> T_Id
30: , -> T_Comma
32: bool -> T_Bool
37: c -> T_Id
38: ) -> T_RP
39: { -> T_LC
42: // this is a function -> T_Comment
65: if -> T_If
68: ( -> T_LP
69: c -> T_Id
71: == -> T_ROp_E
74: true -> T_True
78: ) -> T_RP
79: { -> T_LC
83: return -> T_Return
90: a -> T_Id
91: + -> T_AOp_PL
92: b -> T_Id
93: ; -> T_Semicolon
96: } -> T_RC
99: else -> T_Else
104: { -> T_LC
108: return -> T_Return
115: a -> T_Id
116: - -> T_AOp_MN
117: b -> T_Id
118: ; -> T_Semicolon
121: } -> T_RC
123: } -> T_RC
126: int -> T_Int
130: main -> T_Id
134: ( -> T_LP
135: ) -> T_RP
136: { -> T_LC
139: bool -> T_Bool
144: add -> T_Id
148: = -> T_Assign
150: true -> T_True
154: ; -> T_Semicolon
157: char -> T_Char
162: _assign1 -> T_Id
171: = -> T_Assign
173: '=' -> T_Character
176: ; -> T_Semicolon
179: char -> T_Char
184: String_1 -> T_Id
192: [ -> T_LB
193: ] -> T_RB
195: = -> T_Assign
197: " + " -> T_String
202: ; -> T_Semicolon
205: char -> T_Char
210: String_2 -> T_Id
218: [ -> T_LB
219: ] -> T_RB
221: = -> T_Assign
223: " - " -> T_String
228: ; -> T_Semicolon
231: for -> T_For
234: ( -> T_LP
235: int -> T_Int
239: i -> T_Id
241: = -> T_Assign
243: 0 -> T_Decimal
244: ; -> T_Semicolon
246: i -> T_Id
248: <= -> T_ROp_LE
251: ( -> T_LP
252: +10 -> T_Decimal
256: / -> T_AOp_DV
258: 2 -> T_Decimal
259: ) -> T_RP
260: ; -> T_Semicolon
262: i -> T_Id
264: = -> T_Assign
266: i -> T_Id
268: + -> T_AOp_PL
270: 1 -> T_Decimal
271: ) -> T_RP
272: { -> T_LC
276: for -> T_For
280: ( -> T_LP
281: int -> T_Int
285: j -> T_Id
287: = -> T_Assign
289: 0x0 -> T_Hexadecimal
292: ; -> T_Semicolon
294: j -> T_Id
296: != -> T_ROp_NE
299: ( -> T_LP
300: 5 -> T_Decimal
302: * -> T_AOp_ML
304: -1 -> T_Decimal
306: ) -> T_RP
309: ; -> T_Semicolon
311: j -> T_Id
313: = -> T_Assign
315: j -> T_Id
317: - -> T_AOp_MN
319: 1 -> T_Decimal
320: ) -> T_RP
321: { -> T_LC
326: print -> T_Print
331: ( -> T_LP
332: i -> T_Id
333: ) -> T_RP
334: ; -> T_Semicolon
339: print -> T_Print
344: ( -> T_LP
345: String_1 -> T_Id
353: ) -> T_RP
354: ; -> T_Semicolon
359: print -> T_Print
364: ( -> T_LP
365: j -> T_Id
366: ) -> T_RP
367: ; -> T_Semicolon
372: print -> T_Print
377: ( -> T_LP
378: _assign1 -> T_Id
386: ) -> T_RP
387: ; -> T_Semicolon
392: print -> T_Print
397: ( -> T_LP
398: test_function -> T_Id
411: ( -> T_LP
412: i -> T_Id
413: , -> T_Comma
414: j -> T_Id
415: , -> T_Comma
416: add -> T_Id
419: ) -> T_RP
420: ) -> T_RP
421: ; -> T_Semicolon
425: } -> T_RC
428: } -> T_RC
431: add -> T_Id
435: = -> T_Assign
437: false -> T_False
442: ; -> T_Semicolon
445: for -> T_For
449: ( -> T_LP
450: int -> T_Int
454: i -> T_Id
456: = -> T_Assign
458: 0 -> T_Decimal
459: ; -> T_Semicolon
461: ! -> T_LOp_NOT
462: ( -> T_LP
463: i -> T_Id
465: == -> T_ROp_E
468: +5 -> T_Decimal
470: ) -> T_RP
471: ; -> T_Semicolon
473: i -> T_Id
475: = -> T_Assign
477: i -> T_Id
479: + -> T_AOp_PL
481: 1 -> T_Decimal
482: ) -> T_RP
484: { -> T_LC
488: for -> T_For
492: ( -> T_LP
493: int -> T_Int
497: j -> T_Id
499: = -> T_Assign
501: 0x0 -> T_Hexadecimal
504: ; -> T_Semicolon
506: j -> T_Id
508: >= -> T_ROp_LE
511: -5 -> T_Decimal
513: ; -> T_Semicolon
515: j -> T_Id
517: = -> T_Assign
519: j -> T_Id
521: - -> T_AOp_MN
523: 1 -> T_Decimal
524: ) -> T_RP
526: { -> T_LC
531: if -> T_If
533: ( -> T_LP
534: ( -> T_LP
535: i -> T_Id
537: % -> T_AOp_RM
539: 4 -> T_Decimal
540: ) -> T_RP
542: == -> T_ROp_E
545: 0 -> T_Decimal
547: || -> T_LOp_OR
550: ( -> T_LP
551: i -> T_Id
553: % -> T_AOp_RM
555: 3 -> T_Decimal
556: ) -> T_RP
558: == -> T_ROp_E
561: 0 -> T_Decimal
562: ) -> T_RP
568: continue -> T_Continue
576: ; -> T_Semicolon
581: if -> T_If
583: ( -> T_LP
584: j -> T_Id
586: < -> T_ROp_L
588: -4 -> T_Decimal
591: && -> T_LOp_AND
594: i -> T_Id
596: > -> T_ROp_G
598: 3 -> T_Decimal
599: ) -> T_RP
605: break -> T_Break
610: ; -> T_Semicolon
615: print -> T_Print
620: ( -> T_LP
621: i -> T_Id
622: ) -> T_RP
623: ; -> T_Semicolon
628: print -> T_Print
633: ( -> T_LP
634: String_2 -> T_Id
642: ) -> T_RP
643: ; -> T_Semicolon
648: print -> T_Print
653: ( -> T_LP
654: j -> T_Id
655: ) -> T_RP
656: ; -> T_Semicolon
661: print -> T_Print
666: ( -> T_LP
667: _assign1 -> T_Id
675: ) -> T_RP
676: ; -> T_Semicolon
681: print -> T_Print
686: ( -> T_LP
687: test_function -> T_Id
700: ( -> T_LP
701: i -> T_Id
702: , -> T_Comma
704: j -> T_Id
705: , -> T_Comma
707: add -> T_Id
710: ) -> T_RP
711: ) -> T_RP
712: ; -> T_Semicolon
716: } -> T_RC
719: } -> T_RC
722: print -> T_Print
727: ( -> T_LP
728: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recogized" -> T_String
828: ) -> T_RP
829: ; -> T_Semicolon
832: char -> T_Char
837: back -> T_Id
842: = -> T_Assign
844: '\\' -> T_Character
848: ; -> T_Semicolon
851: char -> T_Char
856: quote -> T_Id
862: = -> T_Assign
864: '\'' -> T_Character
868: ; -> T_Semicolon
871: int -> T_Int
875: _123 -> T_Id
880: = -> T_Assign
882: 0XABCdef1230 -> T_Hexadecimal
894: ; -> T_Semicolon
896: } -> T_RC
